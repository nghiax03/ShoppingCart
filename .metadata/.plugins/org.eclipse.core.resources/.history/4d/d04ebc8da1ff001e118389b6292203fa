package com.example.demo.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.demo.dao.OrderDAO;
import com.example.demo.dao.ProductDAO;
import com.example.demo.entity.Product;
import com.example.demo.form.CustomerForm;
import com.example.demo.model.CartInfo;
import com.example.demo.model.ProductInfo;
import com.example.demo.pagination.PaginationResult;
import com.example.demo.utils.Utils;
import com.example.demo.validator.CustomerFormValidator;

@Controller
@Transactional
public class MainController {
	@Autowired
	private OrderDAO orderDAO;

	@Autowired
	private ProductDAO productDAO;

	@Autowired
	private CustomerFormValidator customerFormValidator;
	
	@InitBinder
	public void myInitBinder(WebDataBinder dataBinder) {
		Object targer = dataBinder.getTarget();
		if(targer == null) {
			return;
		}
		System.out.println("Target= " + targer);
		
		// Trường hợp update SL trên giỏ hàng.
				// (@ModelAttribute("cartForm") @Validated CartInfo cartForm)
		if(targer.getClass() == CartInfo.class) {
			
		}
		
		// Trường hợp save thông tin khách hàng.
				// (@ModelAttribute @Validated CustomerInfo customerForm)
		else if(targer.getClass() == CustomerForm.class) {
			dataBinder.setValidator(customerFormValidator);
		}
	}
	
	@RequestMapping("/403")
	public String accessDenied() {
		return "/403";
	}
	
	@RequestMapping("/")
	public String home() {
		return "index";
	}
	
	//listProdcut
	@RequestMapping({"/productList"})
	public String listProductHandler(Model model, 
			@RequestParam(value = "name", defaultValue = "") String likeName,
			@RequestParam(value = "page", defaultValue = "1") int page) {
		final int maxResult = 5;
		final int maxNavigationPage = 10;
		
		PaginationResult<ProductInfo> result = productDAO
				.queryProducts(page, maxResult, maxNavigationPage, likeName);
		model.addAttribute("paginationProducts", result);
		return "productList";
	}
	
	@RequestMapping({ "/buyProduct" })
	public String listProductHandler(HttpServletRequest request, Model model,//
			@RequestParam(value = "code", defaultValue = "") String code) {
		Product product = null;
		if(code != null && code.length() > 0) {
			product = productDAO.findProduct(code);
		}
		if(product != null) {
			CartInfo cartInfo = Utils.getCartInSession(request);
			ProductInfo productInfo = new ProductInfo(product);
			
			cartInfo.addProduct(productInfo, 1);
		}
		return "redirect:/shoppingCart";
	}
	@RequestMapping({ "/shoppingCartRemoveProduct" })
	public String removeProductHandler(HttpServletRequest request, Model model, //
			@RequestParam(value = "code", defaultValue = "") String code) {
		Product product = null;
		if (code != null && code.length() > 0) {
			product = productDAO.findProduct(code);
		}
		if (product != null) {

			CartInfo cartInfo = Utils.getCartInSession(request);

			ProductInfo productInfo = new ProductInfo(product);

			cartInfo.removeProduct(productInfo);

		}

		return "redirect:/shoppingCart";
	}

}
